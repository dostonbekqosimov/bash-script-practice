sh questionnaire.sh
bash questionnaire.sh
which bash
./questionnaire.sh
ls --color=auto -l
chmod +x questionnaire.sh
ls --color=auto -l
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
echo --help
man echo
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
s
touch countdown.sh
./countdown.sh
ss
dsds
./countdown.sh arg1 arg2 arg3
chmod +x countdown.sh
./countdown.sh arg1 arg2 arg3
dd
md
kd
./countdown.sh arg1 arg2 arg3
./countdown.sh arg arg2 arg3
./countdown.sh arg arg2 arg3
./countdown.sh 4
./countdown.sh 5
dd
hf
hf
hf
./countdown.sh [[ 4 -le 5 ]]
echo$?
echo $?
echo $?
[200~[[ 4 -ge 5 ]]
[[ 4 -ge 5 ]]
[[ 10 -ne 5 ]]
bad_command
ls --color=auto
ls --color=auto -y
help test
clear
[[ -a countdown.sh ]]
[[ -x countdown.sh ]]
help [[ expression ]]
[[ -x countdown.sh && 5 -le 4 ]]
[[ -x countdown.sh || 5 -le 4 ]]
ss
clear
./countdown.sh 1
./countdown.sh -3
help
clear
./countdown.sh 10
help
ls --color=auto /
ls --color=auto /bin
man /bin/sleep
man sleep
sleep 3
./countdown.sh 3
./countdown.sh 3
./countdown.sh 1
help
help while
./countdown.sh 1
./countdown.sh 5
touch bingo.sh
git remote add orig2in git@github.com:dostonbekqosimov/bash-script-practice.git
git remot -v
git remote -v
touch README.md
git add .
git commit -m "Initial commit"
git push - origin2 main
git push -u origin2 main
git remote -v
__vsc_prompt_cmd_original
git push -u orig2in main
git push -u orig2in main
ls --color=auto -al ~/.ssh
ssh-keygen -t ed25519 -C "dostonqosimiy19@gmail.com"
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_ed25519
cat ~/.ssh/id_ed25519.pub
ssh -T git@github.com
git push -u orig2in main
chmod +x bingo.sh
which bsh
which bash
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
__vsc_regex_environment="^CYGWIN*|MINGW*|MSYS*"
[[ "$(uname -s)" =~ $__vsc_regex_environment ]]
__vsc_is_windows=0
__vsc_regex_histcontrol=".*(erasedups|ignoreboth|ignoredups).*"
[[ "$HISTCONTROL" =~ $__vsc_regex_histcontrol ]]
__vsc_history_verify=1
builtin unset __vsc_regex_environment
builtin unset __vsc_regex_histcontrol
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
./bingo.sh
git add .
git commit -m "Add bingo.sh"
git remote -v
git push -u orig2in main
ssh -T git@github.com
git push -u orig2in main
clear
printenv
echo LANG
echo $LANG
declare -p
echo $RANDOM
echo $RANDOM
./bingo.sh
echo $RANDOM
./bingo.sh
./bingo.sh
./bingo.sh
I=0
echo $?
echo
echo bingo.sh countdown.sh questionnaire.sh README.md
echo $I
((I++))
echo $I
help let
(( I+=10))
echo $I
$((I+4))
165
__vsc_prompt_cmd_original
echo $((I+4))
echo $I
$((J=I-6))
J=$((I-6))
echo $J
echo $((J*5+25))
echo $J
declare -p
clear
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
__vsc_regex_environment="^CYGWIN*|MINGW*|MSYS*"
[[ "$(uname -s)" =~ $__vsc_regex_environment ]]
__vsc_is_windows=0
__vsc_regex_histcontrol=".*(erasedups|ignoreboth|ignoredups).*"
[[ "$HISTCONTROL" =~ $__vsc_regex_histcontrol ]]
__vsc_history_verify=1
builtin unset __vsc_regex_environment
builtin unset __vsc_regex_histcontrol
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
__vsc_regex_environment="^CYGWIN*|MINGW*|MSYS*"
[[ "$(uname -s)" =~ $__vsc_regex_environment ]]
__vsc_is_windows=0
__vsc_regex_histcontrol=".*(erasedups|ignoreboth|ignoredups).*"
[[ "$HISTCONTROL" =~ $__vsc_regex_histcontrol ]]
__vsc_history_verify=1
builtin unset __vsc_regex_environment
builtin unset __vsc_regex_histcontrol
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
declare -p J
$J
__vsc_prompt_cmd_original
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
__vsc_regex_environment="^CYGWIN*|MINGW*|MSYS*"
[[ "$(uname -s)" =~ $__vsc_regex_environment ]]
__vsc_is_windows=0
__vsc_regex_histcontrol=".*(erasedups|ignoreboth|ignoredups).*"
[[ "$HISTCONTROL" =~ $__vsc_regex_histcontrol ]]
__vsc_history_verify=1
builtin unset __vsc_regex_environment
builtin unset __vsc_regex_histcontrol
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
declare -p J
declare -p $J
declare -p J
J=8
declare -p J
declare -p RANDOM
echo $((RANDOM%75))
RANDOM
echo RANDOM
__vsc_prompt_cmd_original
echo $((RANDOM))
echo $((RANDOM%75+1))
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
help let
clear
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
touch fortune.sh
chmod +x fortune.sh
./fortune.sh
ARR=("a" "b" "c")
echo $ARR
echo ${ARR}
echo ${ARR[1]}
echo ${ARR[*]}
declare -p ARR
echo
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
help
help function
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
git add .
git commit -m "Add bingo.sh and fortune.sh "
git add remote ori https://github.com/dostonbekqosimov/bash-script-practice.git
git remote add origin3 https://github.com/dostonbekqosimov/bash-script-practice.git
git push origin3 main
./fortune.sh
help
help until
./fortune.sh
help [[ expression ]]
[[ hello == hello ]]
[[ hello == world ]]
[[ hello =~ el ]]
__vsc_prompt_cmd_original
[[ "hello world" =~ "lo wor" ]]
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
[[ "hello world" =~ ^h ]]
[[ "hello world" =~ ^h.+d$ ]]
VAR="hello world"
echo $VAR
[[ VAR == "hello world" ]]
[[ $VAR == "hello world" ]]
[[ $VAR =~ \?$ ]]
[[ test? =~ \?$ ]]
./fo
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
git add .
git commit
git push remote origin3
git remote -v
git history
git push remote origin3
git push origin3 main
clear
touch five.sh
chmod +x f
chmod +x five.sh
__vsc_prompt_cmd_original
./questionnaire.sh
./five.sh
chmod +x questionnaire.sh
./five.sh
chmod +x countdown.sh
chmod +x questionnaire.sh countdown.sh bingo.sh fortune.sh five.sh
ls --color=auto -l
clear
./f
./five.sh
git add .
